###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        02/Dec/2017  09:26:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\app\LPLD_OV7725.c
#    Command line =  
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\app\LPLD_OV7725.c
#        -D LPLD_K60 -D USE_K60F12 -lCN
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\RAM\List\
#        -lB
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\RAM\List\
#        -o
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\RAM\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        E:\IAR\File\arm\INC\c\DLib_Config_Normal.h -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\app\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\CPU\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\common\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\LPLD\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\LPLD\HW\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\FatFs\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\FatFs\option\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\USB\common\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\USB\driver\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\USB\descriptor\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\USB\class\
#        -Ol -I E:\IAR\File\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\RAM\List\LPLD_OV7725.lst
#    Object file  =  
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\RAM\Obj\LPLD_OV7725.o
#
###############################################################################

E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\app\LPLD_OV7725.c
      1          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable10  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable10_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
      2          #include "LPLD_OV7725.h"
      3          #include "LPLD_SCCB.h"
      4          #include "OV7725_REG.h"
      5          

   \                                 In section .bss, align 4
      6          uint8 imgbuff[CAMERA_SIZE];
   \                     imgbuff:
   \   00000000                      DS8 600

   \                                 In section .bss, align 4
      7          uint8 img[CAMERA_W * CAMERA_H];
   \                     img:
   \   00000000                      DS8 4800
      8          

   \                                 In section .data, align 1
      9          volatile IMG_STATUS_e      ov7725_eagle_img_flag = IMG_FINISH;   //图像状态
   \                     ov7725_eagle_img_flag:
   \   00000000   0x01               DC8 1
     10          
     11          /*       鹰眼ov7725初始化        */
     12          

   \                                 In section .text, align 2, keep-with-next
     13          void OV7725_Init(void)
     14          {
   \                     OV7725_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     15              UART_Init();
   \   00000002   0x.... 0x....      BL       UART_Init
     16              NVIC_Init();
   \   00000006   0x.... 0x....      BL       NVIC_Init
     17              while(ov7725_eagle_reg_init() == 0);
   \                     ??OV7725_Init_0: (+1)
   \   0000000A   0x.... 0x....      BL       ov7725_eagle_reg_init
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD0FB             BEQ.N    ??OV7725_Init_0
     18              OV7725_GPIO_Init();
   \   00000012   0x.... 0x....      BL       OV7725_GPIO_Init
     19              OV7725_DMA_Init();
   \   00000016   0x.... 0x....      BL       OV7725_DMA_Init
     20          }//OK
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     21          void OV7725_GPIO_Init(void)
     22          {
   \                     OV7725_GPIO_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     23             GPIO_InitTypeDef gpio_init_struct;
     24          
     25             gpio_init_struct.GPIO_PTx = PTA;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x400ff000
   \   00000008   0x9001             STR      R0,[SP, #+4]
     26             gpio_init_struct.GPIO_Pins = GPIO_Pin27;//PCLK
   \   0000000A   0xF05F 0x6000      MOVS     R0,#+134217728
   \   0000000E   0x9002             STR      R0,[SP, #+8]
     27             gpio_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0010      STRB     R0,[SP, #+16]
     28             gpio_init_struct.GPIO_PinControl = INPUT_PULL_DOWN|IRQC_DMAFA;
   \   00000016   0xF05F 0x1002      MOVS     R0,#+131074
   \   0000001A   0x9003             STR      R0,[SP, #+12]
     29             LPLD_GPIO_Init(gpio_init_struct);
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_GPIO_Init
     30          
     31             //disable_irq(PORTA_IRQn);//关闭PTA的中断  
     32             gpio_init_struct.GPIO_PTx = PTA;
   \   0000002E   0x....             LDR.N    R0,??DataTable10_2  ;; 0x400ff000
   \   00000030   0x9001             STR      R0,[SP, #+4]
     33             gpio_init_struct.GPIO_Pins = GPIO_Pin29;//VSYNC
   \   00000032   0xF05F 0x5000      MOVS     R0,#+536870912
   \   00000036   0x9002             STR      R0,[SP, #+8]
     34             gpio_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF88D 0x0010      STRB     R0,[SP, #+16]
     35             gpio_init_struct.GPIO_PinControl = IRQC_RI|INPUT_PULL_DOWN|INPUT_PF_EN;
   \   0000003E   0x....             LDR.N    R0,??DataTable10_3  ;; 0x90012
   \   00000040   0x9003             STR      R0,[SP, #+12]
     36             gpio_init_struct.GPIO_Isr = porta_isr;
   \   00000042   0x.... 0x....      ADR.W    R0,porta_isr
   \   00000046   0x9005             STR      R0,[SP, #+20]
     37             LPLD_GPIO_Init(gpio_init_struct);
   \   00000048   0xA901             ADD      R1,SP,#+4
   \   0000004A   0xB084             SUB      SP,SP,#+16
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x2214             MOVS     R2,#+20
   \   00000050   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000054   0xBC0F             POP      {R0-R3}
   \   00000056   0x.... 0x....      BL       LPLD_GPIO_Init
     38              
     39             gpio_init_struct.GPIO_PTx = PTB;
   \   0000005A   0x....             LDR.N    R0,??DataTable10_4  ;; 0x400ff040
   \   0000005C   0x9001             STR      R0,[SP, #+4]
     40             gpio_init_struct.GPIO_Pins = GPIO_Pin0_7;
   \   0000005E   0x20FF             MOVS     R0,#+255
   \   00000060   0x9002             STR      R0,[SP, #+8]
     41             gpio_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xF88D 0x0010      STRB     R0,[SP, #+16]
     42             LPLD_GPIO_Init(gpio_init_struct);
   \   00000068   0xA901             ADD      R1,SP,#+4
   \   0000006A   0xB084             SUB      SP,SP,#+16
   \   0000006C   0x4668             MOV      R0,SP
   \   0000006E   0x2214             MOVS     R2,#+20
   \   00000070   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000074   0xBC0F             POP      {R0-R3}
   \   00000076   0x.... 0x....      BL       LPLD_GPIO_Init
     43          
     44          }//初始化OK
   \   0000007A   0xB007             ADD      SP,SP,#+28
   \   0000007C   0xBD00             POP      {PC}             ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void OV7725_DMA_Init(void)
     47          {
   \                     OV7725_DMA_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
     48              DMA_InitTypeDef dma_init_struct;
     49          
     50              dma_init_struct.DMA_CHx = DMA_CH0;    
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x001C      STRB     R0,[SP, #+28]
     51              dma_init_struct.DMA_Req = PORTA_DMAREQ;       
   \   0000000A   0x2031             MOVS     R0,#+49
   \   0000000C   0xF88D 0x001D      STRB     R0,[SP, #+29]
     52              dma_init_struct.DMA_PeriodicTriggerEnable = FALSE;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x001E      STRB     R0,[SP, #+30]
     53              dma_init_struct.DMA_MajorLoopCnt = CAMERA_SIZE; 
   \   00000016   0xF44F 0x7016      MOV      R0,#+600
   \   0000001A   0xF8AD 0x0020      STRH     R0,[SP, #+32]
     54              dma_init_struct.DMA_MinorByteCnt = 1; 
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x9009             STR      R0,[SP, #+36]
     55              dma_init_struct.DMA_SourceDataSize = DMA_SRC_8BIT;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF88D 0x002C      STRB     R0,[SP, #+44]
     56              dma_init_struct.DMA_SourceAddr = (uint32)&PTB->PDIR;       
   \   00000028   0x....             LDR.N    R0,??DataTable10_5  ;; 0x400ff050
   \   0000002A   0x900A             STR      R0,[SP, #+40]
     57              dma_init_struct.DMA_SourceAddrOffset = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xF8AD 0x002E      STRH     R0,[SP, #+46]
     58              dma_init_struct.DMA_LastSourceAddrAdj = 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x900C             STR      R0,[SP, #+48]
     59              dma_init_struct.DMA_DestAddr = (uint32)imgbuff;      
   \   00000036   0x....             LDR.N    R0,??DataTable10_6
   \   00000038   0x900D             STR      R0,[SP, #+52]
     60              dma_init_struct.DMA_DestDataSize = DMA_DST_8BIT;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF88D 0x0038      STRB     R0,[SP, #+56]
     61              dma_init_struct.DMA_DestAddrOffset = 1;       
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xF8AD 0x003A      STRH     R0,[SP, #+58]
     62              dma_init_struct.DMA_LastDestAddrAdj = 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x900F             STR      R0,[SP, #+60]
     63              dma_init_struct.DMA_AutoDisableReq = TRUE;    
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0xF88D 0x0040      STRB     R0,[SP, #+64]
     64              dma_init_struct.DMA_MajorCompleteIntEnable = TRUE;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xF88D 0x0041      STRB     R0,[SP, #+65]
     65              dma_init_struct.DMA_MajorHalfCompleteIntEnable = FALSE;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0xF88D 0x0042      STRB     R0,[SP, #+66]
     66              dma_init_struct.DMA_Isr = LPLD_DMA_Isr;
   \   0000005C   0x.... 0x....      ADR.W    R0,LPLD_DMA_Isr
   \   00000060   0x9011             STR      R0,[SP, #+68]
     67          
     68              LPLD_DMA_Init(dma_init_struct);
   \   00000062   0xA907             ADD      R1,SP,#+28
   \   00000064   0xB084             SUB      SP,SP,#+16
   \   00000066   0x4668             MOV      R0,SP
   \   00000068   0x222C             MOVS     R2,#+44
   \   0000006A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000006E   0xBC0F             POP      {R0-R3}
   \   00000070   0x.... 0x....      BL       LPLD_DMA_Init
     69              //LPLD_DMA_DisEnableIrq(dma_init_struct);
     70              DMA0->INT |= 0x1u << 0;//清除通道传输标志位
   \   00000074   0x....             LDR.N    R0,??DataTable10_7  ;; 0x40008024
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000007C   0x....             LDR.N    R1,??DataTable10_7  ;; 0x40008024
   \   0000007E   0x6008             STR      R0,[R1, #+0]
     71          
     72              LPLD_DMA_EnableIrq(dma_init_struct);
   \   00000080   0xA907             ADD      R1,SP,#+28
   \   00000082   0xB084             SUB      SP,SP,#+16
   \   00000084   0x4668             MOV      R0,SP
   \   00000086   0x222C             MOVS     R2,#+44
   \   00000088   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000008C   0xBC0F             POP      {R0-R3}
   \   0000008E   0x.... 0x....      BL       LPLD_DMA_EnableIrq
     73          
     74          }//DMAOK
   \   00000092   0xB013             ADD      SP,SP,#+76
   \   00000094   0xBD00             POP      {PC}             ;; return
     75          

   \                                 In section .text, align 2, keep-with-next
     76          void NVIC_Init(void)
     77          {
   \                     NVIC_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     78              NVIC_InitTypeDef nvic_init_struct;
     79              //配置PORTA的NVIC分组
     80              nvic_init_struct.NVIC_IRQChannel = PORTA_IRQn;
   \   00000004   0x2057             MOVS     R0,#+87
   \   00000006   0xF88D 0x0004      STRB     R0,[SP, #+4]
     81              nvic_init_struct.NVIC_IRQChannelGroupPriority = NVIC_PriorityGroup_3;
   \   0000000A   0x2004             MOVS     R0,#+4
   \   0000000C   0x9002             STR      R0,[SP, #+8]
     82              nvic_init_struct.NVIC_IRQChannelPreemptionPriority = 2;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x9003             STR      R0,[SP, #+12]
     83              nvic_init_struct.NVIC_IRQChannelSubPriority = 1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x9004             STR      R0,[SP, #+16]
     84              nvic_init_struct.NVIC_IRQChannelEnable = FALSE;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0014      STRB     R0,[SP, #+20]
     85              LPLD_NVIC_Init(nvic_init_struct);
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_NVIC_Init
     86              //配置DMA0的NVIC分组
     87              nvic_init_struct.NVIC_IRQChannel = DMA0_DMA16_IRQn;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF88D 0x0004      STRB     R0,[SP, #+4]
     88              nvic_init_struct.NVIC_IRQChannelGroupPriority = NVIC_PriorityGroup_3;
   \   00000034   0x2004             MOVS     R0,#+4
   \   00000036   0x9002             STR      R0,[SP, #+8]
     89              nvic_init_struct.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x9003             STR      R0,[SP, #+12]
     90              nvic_init_struct.NVIC_IRQChannelSubPriority = 1;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9004             STR      R0,[SP, #+16]
     91              nvic_init_struct.NVIC_IRQChannelEnable = FALSE;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xF88D 0x0014      STRB     R0,[SP, #+20]
     92              
     93              LPLD_NVIC_Init(nvic_init_struct);
   \   00000046   0xA901             ADD      R1,SP,#+4
   \   00000048   0xB084             SUB      SP,SP,#+16
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x2214             MOVS     R2,#+20
   \   0000004E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000052   0xBC0F             POP      {R0-R3}
   \   00000054   0x.... 0x....      BL       LPLD_NVIC_Init
     94          }
   \   00000058   0xB007             ADD      SP,SP,#+28
   \   0000005A   0xBD00             POP      {PC}             ;; return
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void UART_Init(void)
     97          {
   \                     UART_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     98              UART_InitTypeDef uart5_init_struct;
     99          
    100              uart5_init_struct.UART_Uartx = UART5;     //使用UART5
   \   00000004   0x....             LDR.N    R0,??DataTable10_8  ;; 0x400eb000
   \   00000006   0x9003             STR      R0,[SP, #+12]
    101              uart5_init_struct.UART_BaudRate = 115200; //设置波特率115200
   \   00000008   0xF45F 0x30E1      MOVS     R0,#+115200
   \   0000000C   0x9004             STR      R0,[SP, #+16]
    102              uart5_init_struct.UART_RxPin = PTE9;      //接收引脚为PTE9
   \   0000000E   0x2085             MOVS     R0,#+133
   \   00000010   0xF88D 0x0015      STRB     R0,[SP, #+21]
    103              uart5_init_struct.UART_TxPin = PTE8;      //发送引脚为PTE8
   \   00000014   0x2084             MOVS     R0,#+132
   \   00000016   0xF88D 0x0014      STRB     R0,[SP, #+20]
    104                                                            //初始化UART
    105              LPLD_UART_Init(uart5_init_struct);
   \   0000001A   0xA903             ADD      R1,SP,#+12
   \   0000001C   0xB084             SUB      SP,SP,#+16
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x221C             MOVS     R2,#+28
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000026   0xBC0F             POP      {R0-R3}
   \   00000028   0x.... 0x....      BL       LPLD_UART_Init
    106          }
   \   0000002C   0xB00B             ADD      SP,SP,#+44
   \   0000002E   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
    107          void porta_isr(void)
    108          {
   \                     porta_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    109              if (LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin29))
   \   00000002   0x....             LDR.N    R0,??DataTable10_9  ;; 0x400490a0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0080             LSLS     R0,R0,#+2
   \   00000008   0xD521             BPL.N    ??porta_isr_0
    110              {
    111                  if (ov7725_eagle_img_flag == IMG_START)                   
   \   0000000A   0x....             LDR.N    R0,??DataTable10_10
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2804             CMP      R0,#+4
   \   00000010   0xD117             BNE.N    ??porta_isr_1
    112                  {
    113                      ov7725_eagle_img_flag = IMG_GATHER;          
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x....             LDR.N    R1,??DataTable10_10
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    114                      disable_irq(PORTA_IRQn);
   \   00000018   0x2057             MOVS     R0,#+87
   \   0000001A   0x.... 0x....      BL       NVIC_DisableIRQ
    115                      PORTA->ISFR = 1 << 27;            //清空PCLK标志位
   \   0000001E   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000022   0x....             LDR.N    R1,??DataTable10_9  ;; 0x400490a0
   \   00000024   0x6008             STR      R0,[R1, #+0]
    116                      DMA0->ERQ |= DMA_ERQ_ERQ0_MASK << 0;
   \   00000026   0x....             LDR.N    R0,??DataTable10_11  ;; 0x4000800c
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000002E   0x....             LDR.N    R1,??DataTable10_11  ;; 0x4000800c
   \   00000030   0x6008             STR      R0,[R1, #+0]
    117                      PORTA->ISFR = 1 << 27;            
   \   00000032   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000036   0x....             LDR.N    R1,??DataTable10_9  ;; 0x400490a0
   \   00000038   0x6008             STR      R0,[R1, #+0]
    118                      DMA0->TCD[0].DADDR = DMA_DADDR_DADDR(imgbuff);
   \   0000003A   0x....             LDR.N    R0,??DataTable10_6
   \   0000003C   0x....             LDR.N    R1,??DataTable10_12  ;; 0x40009010
   \   0000003E   0x6008             STR      R0,[R1, #+0]
   \   00000040   0xE005             B.N      ??porta_isr_0
    119                  }
    120                  else
    121                  {
    122                      disable_irq(PORTA_IRQn);
   \                     ??porta_isr_1: (+1)
   \   00000042   0x2057             MOVS     R0,#+87
   \   00000044   0x.... 0x....      BL       NVIC_DisableIRQ
    123                      ov7725_eagle_img_flag = IMG_FAIL;
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0x....             LDR.N    R1,??DataTable10_10
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    124                  }
    125              }
    126          }
   \                     ??porta_isr_0: (+1)
   \   0000004E   0xBD01             POP      {R0,PC}          ;; return
    127          

   \                                 In section .text, align 4, keep-with-next
    128          void LPLD_DMA_Isr(void)
    129          {
    130              ov7725_eagle_img_flag = IMG_FINISH;
   \                     LPLD_DMA_Isr: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable10_10
   \   00000004   0x7008             STRB     R0,[R1, #+0]
    131              DMA0->INT |= 0x1u << 0;//清除通道传输中断标志位
   \   00000006   0x....             LDR.N    R0,??DataTable10_7  ;; 0x40008024
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000E   0x....             LDR.N    R1,??DataTable10_7  ;; 0x40008024
   \   00000010   0x6008             STR      R0,[R1, #+0]
    132          }
   \   00000012   0x4770             BX       LR               ;; return
    133          
    134          /*!
    135           *  @brief      鹰眼ov7725采集图像（采集到的数据存储在 初始化时配置的地址上）
    136           *  @since      v5.0
    137           */

   \                                 In section .text, align 2, keep-with-next
    138          void ov7725_eagle_get_img()
    139          {
   \                     ov7725_eagle_get_img: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    140              
    141              ov7725_eagle_img_flag = IMG_START;                   //开始采集图像
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x....             LDR.N    R1,??DataTable10_10
   \   00000006   0x7008             STRB     R0,[R1, #+0]
    142              PORTA->ISFR = ~0;                        //写1清中断标志位(必须的，不然回导致一开中断就马上触发中断)
   \   00000008   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000000C   0x....             LDR.N    R1,??DataTable10_9  ;; 0x400490a0
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    143              enable_irq(PORTA_IRQn);                         //允许PTA的中断
   \   00000010   0x2057             MOVS     R0,#+87
   \   00000012   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000016   0xE00D             B.N      ??ov7725_eagle_get_img_0
    144              while(ov7725_eagle_img_flag != IMG_FINISH)           //等待图像采集完毕
    145              {
    146                  if(ov7725_eagle_img_flag == IMG_FAIL)            //假如图像采集错误，则重新开始采集
   \                     ??ov7725_eagle_get_img_1: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable10_10
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2802             CMP      R0,#+2
   \   0000001E   0xD109             BNE.N    ??ov7725_eagle_get_img_0
    147                  {
    148                      ov7725_eagle_img_flag = IMG_START;           //开始采集图像
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x....             LDR.N    R1,??DataTable10_10
   \   00000024   0x7008             STRB     R0,[R1, #+0]
    149                      PORTA->ISFR = ~0;                //写1清中断标志位(必须的，不然回导致一开中断就马上触发中断)
   \   00000026   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000002A   0x....             LDR.N    R1,??DataTable10_9  ;; 0x400490a0
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    150                      enable_irq(PORTA_IRQn);                 //允许PTA的中断
   \   0000002E   0x2057             MOVS     R0,#+87
   \   00000030   0x.... 0x....      BL       NVIC_EnableIRQ
    151                  }
    152              }
   \                     ??ov7725_eagle_get_img_0: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable10_10
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD1ED             BNE.N    ??ov7725_eagle_get_img_1
    153          }
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
    154          
    155          
    156          /*OV7725初始化配置表*/

   \                                 In section .data, align 4
    157          reg_s ov7725_eagle_reg[] =
   \                     ov7725_eagle_reg:
   \   00000000   0x0D 0xC1          DC8 13, 193, 17, 0, 9, 3, 12, 208, 18, 64, 23, 63, 24, 80, 25, 3, 26
   \              0x11 0x00    
   \              0x09 0x03    
   \              0x0C 0xD0    
   \              0x12 0x40    
   \              0x17 0x3F    
   \              0x18 0x50    
   \              0x19 0x03    
   \              0x1A         
   \   00000011   0x78 0x32          DC8 120, 50, 0, 160, 10, 99, 224, 172, 255, 101, 12, 102, 0, 103, 0, 41
   \              0x00 0xA0    
   \              0x0A 0x63    
   \              0xE0 0xAC    
   \              0xFF 0x65    
   \              0x0C 0x66    
   \              0x00 0x67    
   \              0x00 0x29    
   \   00000021   0x14 0x2C          DC8 20, 44, 30, 42, 0, 126, 12, 127, 22, 128, 42, 129, 78, 130, 97, 131
   \              0x1E 0x2A    
   \              0x00 0x7E    
   \              0x0C 0x7F    
   \              0x16 0x80    
   \              0x2A 0x81    
   \              0x4E 0x82    
   \              0x61 0x83    
   \   00000031   0x6F 0x84          DC8 111, 132, 123, 133, 134, 134, 142, 135, 151, 136, 164, 137, 175
   \              0x7B 0x85    
   \              0x86 0x86    
   \              0x8E 0x87    
   \              0x97 0x88    
   \              0xA4 0x89    
   \              0xAF         
   \   0000003E   0x8A 0xC5          DC8 138, 197, 139, 215, 140, 232, 141, 32, 74, 0, 73, 19, 71, 8, 75, 20
   \              0x8B 0xD7    
   \              0x8C 0xE8    
   \              0x8D 0x20    
   \              0x4A 0x00    
   \              0x49 0x13    
   \              0x47 0x08    
   \              0x4B 0x14    
   \   0000004E   0x4C 0x17          DC8 76, 23, 70, 5, 34, 153, 35, 3, 166, 4, 155, 0, 156, 255, 171, 6
   \              0x46 0x05    
   \              0x22 0x99    
   \              0x23 0x03    
   \              0xA6 0x04    
   \              0x9B 0x00    
   \              0x9C 0xFF    
   \              0xAB 0x06    
   \   0000005E   0x9E 0x11          DC8 158, 17, 159, 2, 0, 0
   \              0x9F 0x02    
   \              0x00 0x00    
    158          {
    159              //寄存器，寄存器值次
    160              {OV7725_COM4         , 0xC1},
    161              {OV7725_CLKRC        , 0x00},
    162              {OV7725_COM2         , 0x03},
    163              {OV7725_COM3         , 0xD0},
    164              {OV7725_COM7         , 0x40},
    165              {OV7725_HSTART       , 0x3F},
    166              {OV7725_HSIZE        , 0x50},
    167              {OV7725_VSTRT        , 0x03},
    168              {OV7725_VSIZE        , 0x78},
    169              {OV7725_HREF         , 0x00},
    170              {OV7725_SCAL0        , 0x0A},
    171              {OV7725_AWB_Ctrl0    , 0xE0},
    172              {OV7725_DSPAuto      , 0xff},
    173              {OV7725_DSP_Ctrl2    , 0x0C},
    174              {OV7725_DSP_Ctrl3    , 0x00},
    175              {OV7725_DSP_Ctrl4    , 0x00},
    176          
    177          #if (CAMERA_W == 80)
    178              {OV7725_HOutSize     , 0x14},
    179          #elif (CAMERA_W == 160)
    180              {OV7725_HOutSize     , 0x28},
    181          #elif (CAMERA_W == 240)
    182              {OV7725_HOutSize     , 0x3c},
    183          #elif (CAMERA_W == 320)
    184              {OV7725_HOutSize     , 0x50},
    185          #else
    186          
    187          #endif
    188          
    189          #if (CAMERA_H == 60 )
    190              {OV7725_VOutSize     , 0x1E},
    191          #elif (CAMERA_H == 120 )
    192              {OV7725_VOutSize     , 0x3c},
    193          #elif (CAMERA_H == 180 )
    194              {OV7725_VOutSize     , 0x5a},
    195          #elif (CAMERA_H == 240 )
    196              {OV7725_VOutSize     , 0x78},
    197          #else
    198          
    199          #endif
    200          
    201              {OV7725_EXHCH        , 0x00},
    202              {OV7725_GAM1         , 0x0c},
    203              {OV7725_GAM2         , 0x16},
    204              {OV7725_GAM3         , 0x2a},
    205              {OV7725_GAM4         , 0x4e},
    206              {OV7725_GAM5         , 0x61},
    207              {OV7725_GAM6         , 0x6f},
    208              {OV7725_GAM7         , 0x7b},
    209              {OV7725_GAM8         , 0x86},
    210              {OV7725_GAM9         , 0x8e},
    211              {OV7725_GAM10        , 0x97},
    212              {OV7725_GAM11        , 0xa4},
    213              {OV7725_GAM12        , 0xaf},
    214              {OV7725_GAM13        , 0xc5},
    215              {OV7725_GAM14        , 0xd7},
    216              {OV7725_GAM15        , 0xe8},
    217              {OV7725_SLOP         , 0x20},
    218              {OV7725_LC_RADI      , 0x00},
    219              {OV7725_LC_COEF      , 0x13},
    220              {OV7725_LC_XC        , 0x08},
    221              {OV7725_LC_COEFB     , 0x14},
    222              {OV7725_LC_COEFR     , 0x17},
    223              {OV7725_LC_CTR       , 0x05},
    224              {OV7725_BDBase       , 0x99},
    225              {OV7725_BDMStep      , 0x03},
    226              {OV7725_SDE          , 0x04},
    227              {OV7725_BRIGHT       , 0x00},
    228              {OV7725_CNST         , 0xFF},
    229              {OV7725_SIGN         , 0x06},
    230              {OV7725_UVADJ0       , 0x11},
    231              {OV7725_UVADJ1       , 0x02},
    232          
    233          };
    234          

   \                                 In section .data, align 1
    235          uint8 ov7725_eagle_cfgnum = ARR_SIZE( ov7725_eagle_reg ) ; /*结构体数组成员数目*/
   \                     ov7725_eagle_cfgnum:
   \   00000000   0x31               DC8 49
    236          
    237          
    238          /*鹰眼ov7725寄存器 初始化*/

   \                                 In section .text, align 2, keep-with-next
    239          uint8 ov7725_eagle_reg_init()
    240          {
   \                     ov7725_eagle_reg_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    241              uint16 i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    242              uint8 Sensor_IDCode = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
    243              SCCB_GPIO_Init();
   \   0000000C   0x.... 0x....      BL       SCCB_GPIO_Init
    244          
    245              ov7725_delay();
   \   00000010   0x.... 0x....      BL       ov7725_delay
    246              if( 0 == SCCB_WriteByte ( OV7725_COM7, 0x80 ) ) /*复位sensor */
   \   00000014   0x2180             MOVS     R1,#+128
   \   00000016   0x2012             MOVS     R0,#+18
   \   00000018   0x.... 0x....      BL       SCCB_WriteByte
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD101             BNE.N    ??ov7725_eagle_reg_init_0
    247              {
    248                  return 0 ;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE02A             B.N      ??ov7725_eagle_reg_init_1
    249              }
    250          
    251              ov7725_delay();
   \                     ??ov7725_eagle_reg_init_0: (+1)
   \   00000024   0x.... 0x....      BL       ov7725_delay
    252              if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, OV7725_VER ) )    /* 读取sensor ID号*/
   \   00000028   0x220B             MOVS     R2,#+11
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0xA800             ADD      R0,SP,#+0
   \   0000002E   0x.... 0x....      BL       SCCB_ReadByte
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD101             BNE.N    ??ov7725_eagle_reg_init_2
    253              {
    254                  return 0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xE01F             B.N      ??ov7725_eagle_reg_init_1
    255              }
    256          
    257              if(Sensor_IDCode == OV7725_ID)
   \                     ??ov7725_eagle_reg_init_2: (+1)
   \   0000003A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003E   0x2821             CMP      R0,#+33
   \   00000040   0xD11A             BNE.N    ??ov7725_eagle_reg_init_3
    258              {
    259                  for( i = 0 ; i < ov7725_eagle_cfgnum ; i++ )
   \   00000042   0x2400             MOVS     R4,#+0
   \   00000044   0xE000             B.N      ??ov7725_eagle_reg_init_4
   \                     ??ov7725_eagle_reg_init_5: (+1)
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \                     ??ov7725_eagle_reg_init_4: (+1)
   \   00000048   0x....             LDR.N    R0,??DataTable10_13
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000004E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD20F             BCS.N    ??ov7725_eagle_reg_init_6
    260                  {
    261                      if( 0 == SCCB_WriteByte(ov7725_eagle_reg[i].addr, ov7725_eagle_reg[i].val) )
   \   00000054   0x....             LDR.N    R0,??DataTable10_14
   \   00000056   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000058   0xEB10 0x0044      ADDS     R0,R0,R4, LSL #+1
   \   0000005C   0x7841             LDRB     R1,[R0, #+1]
   \   0000005E   0x....             LDR.N    R0,??DataTable10_14
   \   00000060   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000062   0xF810 0x0014      LDRB     R0,[R0, R4, LSL #+1]
   \   00000066   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000068   0x.... 0x....      BL       SCCB_WriteByte
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD1EA             BNE.N    ??ov7725_eagle_reg_init_5
    262                      {
    263                          return 0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0xE002             B.N      ??ov7725_eagle_reg_init_1
    264                      }
    265                  }
    266              }
    267              else
    268              {
    269                  return 0;
    270              }
    271              return 1;
   \                     ??ov7725_eagle_reg_init_6: (+1)
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0xE000             B.N      ??ov7725_eagle_reg_init_1
   \                     ??ov7725_eagle_reg_init_3: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \                     ??ov7725_eagle_reg_init_1: (+1)
   \   0000007A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    272          }
    273          

   \                                 In section .text, align 2, keep-with-next
    274          void img_extract(void *dst, void *src, uint32 srclen)
    275          {
   \                     img_extract: (+1)
   \   00000000   0xB438             PUSH     {R3-R5}
    276              uint8_t colour[2] = {255, 0}; //0 和 1 分别对应的颜色
   \   00000002   0x....             LDR.N    R3,??DataTable10_15
   \   00000004   0x881B             LDRH     R3,[R3, #+0]
   \   00000006   0xF8AD 0x3000      STRH     R3,[SP, #+0]
    277              uint8_t *mdst = dst;
    278              uint8_t *msrc = src;
   \   0000000A   0xE038             B.N      ??img_extract_0
    279              //注：山外的摄像头 0 表示 白色，1表示 黑色
    280              uint8_t tmpsrc;
    281              while (srclen--)
    282              {
    283                  tmpsrc = *msrc++;
   \                     ??img_extract_1: (+1)
   \   0000000C   0x780B             LDRB     R3,[R1, #+0]
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
    284                  *mdst++ = colour[(tmpsrc >> 7) & 0x01];
   \   00000010   0xAC00             ADD      R4,SP,#+0
   \   00000012   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000014   0x11DD             ASRS     R5,R3,#+7
   \   00000016   0x5D2C             LDRB     R4,[R5, R4]
   \   00000018   0x7004             STRB     R4,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
    285                  *mdst++ = colour[(tmpsrc >> 6) & 0x01];
   \   0000001C   0xAC00             ADD      R4,SP,#+0
   \   0000001E   0xF3C3 0x1580      UBFX     R5,R3,#+6,#+1
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x5D2C             LDRB     R4,[R5, R4]
   \   00000026   0x7004             STRB     R4,[R0, #+0]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
    286                  *mdst++ = colour[(tmpsrc >> 5) & 0x01];
   \   0000002A   0xAC00             ADD      R4,SP,#+0
   \   0000002C   0xF3C3 0x1540      UBFX     R5,R3,#+5,#+1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x5D2C             LDRB     R4,[R5, R4]
   \   00000034   0x7004             STRB     R4,[R0, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
    287                  *mdst++ = colour[(tmpsrc >> 4) & 0x01];
   \   00000038   0xAC00             ADD      R4,SP,#+0
   \   0000003A   0xF3C3 0x1500      UBFX     R5,R3,#+4,#+1
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x5D2C             LDRB     R4,[R5, R4]
   \   00000042   0x7004             STRB     R4,[R0, #+0]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
    288                  *mdst++ = colour[(tmpsrc >> 3) & 0x01];
   \   00000046   0xAC00             ADD      R4,SP,#+0
   \   00000048   0xF3C3 0x05C0      UBFX     R5,R3,#+3,#+1
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x5D2C             LDRB     R4,[R5, R4]
   \   00000050   0x7004             STRB     R4,[R0, #+0]
   \   00000052   0x1C40             ADDS     R0,R0,#+1
    289                  *mdst++ = colour[(tmpsrc >> 2) & 0x01];
   \   00000054   0xAC00             ADD      R4,SP,#+0
   \   00000056   0xF3C3 0x0580      UBFX     R5,R3,#+2,#+1
   \   0000005A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005C   0x5D2C             LDRB     R4,[R5, R4]
   \   0000005E   0x7004             STRB     R4,[R0, #+0]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
    290                  *mdst++ = colour[(tmpsrc >> 1) & 0x01];
   \   00000062   0xAC00             ADD      R4,SP,#+0
   \   00000064   0xF3C3 0x0540      UBFX     R5,R3,#+1,#+1
   \   00000068   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006A   0x5D2C             LDRB     R4,[R5, R4]
   \   0000006C   0x7004             STRB     R4,[R0, #+0]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
    291                  *mdst++ = colour[(tmpsrc >> 0) & 0x01];
   \   00000070   0xAC00             ADD      R4,SP,#+0
   \   00000072   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000074   0xF013 0x0301      ANDS     R3,R3,#0x1
   \   00000078   0x5D1B             LDRB     R3,[R3, R4]
   \   0000007A   0x7003             STRB     R3,[R0, #+0]
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
    292              }
   \                     ??img_extract_0: (+1)
   \   0000007E   0x0013             MOVS     R3,R2
   \   00000080   0x1E5A             SUBS     R2,R3,#+1
   \   00000082   0x2B00             CMP      R3,#+0
   \   00000084   0xD1C2             BNE.N    ??img_extract_1
    293          }
   \   00000086   0xBC31             POP      {R0,R4,R5}
   \   00000088   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    294          void lpld_sending(void *imgaddr, int32 imgsize)
    295          {
   \                     lpld_sending: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    296          #define CMD_IMG 1
    297              int8 cmdf[2] = {CMD_IMG, ~CMD_IMG}; //山外上位机 使用的命令
   \   00000006   0x....             LDR.N    R0,??DataTable10_16
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    298              int8 cmdr[2] = {~CMD_IMG, CMD_IMG}; //山外上位机 使用的命令
   \   0000000E   0x....             LDR.N    R0,??DataTable10_17
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    299          
    300              LPLD_UART_PutCharArr(UART5, cmdf, sizeof(cmdf)); //先发送命令
   \   00000016   0x2202             MOVS     R2,#+2
   \   00000018   0xF10D 0x0102      ADD      R1,SP,#+2
   \   0000001C   0x....             LDR.N    R0,??DataTable10_8  ;; 0x400eb000
   \   0000001E   0x.... 0x....      BL       LPLD_UART_PutCharArr
    301          
    302              LPLD_UART_PutCharArr(UART5, (int8 *)imgaddr, imgsize); //再发送图像
   \   00000022   0x002A             MOVS     R2,R5
   \   00000024   0x0021             MOVS     R1,R4
   \   00000026   0x....             LDR.N    R0,??DataTable10_8  ;; 0x400eb000
   \   00000028   0x.... 0x....      BL       LPLD_UART_PutCharArr
    303          
    304              LPLD_UART_PutCharArr(UART5, cmdr, sizeof(cmdr)); //先发送命令
   \   0000002C   0x2202             MOVS     R2,#+2
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0x....             LDR.N    R0,??DataTable10_8  ;; 0x400eb000
   \   00000032   0x.... 0x....      BL       LPLD_UART_PutCharArr
    305          }
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    306          

   \                                 In section .text, align 4, keep-with-next
    307          void ov7725_delay(void)
    308          {
    309              uint16 i, n;
    310              for (i = 0; i < 30000; i++)
   \                     ov7725_delay: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE005             B.N      ??ov7725_delay_0
    311              {
    312                  for (n = 0; n < 200; n++)
    313                  {
    314                      asm("nop");
   \                     ??ov7725_delay_1: (+1)
   \   00000004   0xBF00             nop
    315                  }
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??ov7725_delay_2: (+1)
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x29C8             CMP      R1,#+200
   \   0000000C   0xDBFA             BLT.N    ??ov7725_delay_1
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??ov7725_delay_0: (+1)
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xF247 0x5130      MOVW     R1,#+30000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xDA01             BGE.N    ??ov7725_delay_3
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xE7F4             B.N      ??ov7725_delay_2
    316              }
    317          }
   \                     ??ov7725_delay_3: (+1)
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x00090012         DC32     0x90012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x400FF050         DC32     0x400ff050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     imgbuff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x40008024         DC32     0x40008024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x400EB000         DC32     0x400eb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x400490A0         DC32     0x400490a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     ov7725_eagle_img_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x40009010         DC32     0x40009010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x........         DC32     ov7725_eagle_cfgnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x........         DC32     ov7725_eagle_reg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .rodata, align 2
   \                     ?_0:
   \   00000000   0xFF 0x00          DC8 255, 0

   \                                 In section .rodata, align 2
   \                     ?_1:
   \   00000000   0x01 0xFE          DC8 1, -2

   \                                 In section .rodata, align 2
   \                     ?_2:
   \   00000000   0xFE 0x01          DC8 -2, 1

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LPLD_DMA_Isr
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
      48   NVIC_Init
        32   -> LPLD_NVIC_Init
        48   -> __aeabi_memcpy4
      96   OV7725_DMA_Init
        80   -> LPLD_DMA_EnableIrq
        80   -> LPLD_DMA_Init
        96   -> __aeabi_memcpy4
      48   OV7725_GPIO_Init
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
       8   OV7725_Init
         8   -> NVIC_Init
         8   -> OV7725_DMA_Init
         8   -> OV7725_GPIO_Init
         8   -> UART_Init
         8   -> ov7725_eagle_reg_init
      64   UART_Init
        48   -> LPLD_UART_Init
        64   -> __aeabi_memcpy4
      12   img_extract
      16   lpld_sending
        16   -> LPLD_UART_PutCharArr
       0   ov7725_delay
       8   ov7725_eagle_get_img
         8   -> NVIC_EnableIRQ
      16   ov7725_eagle_reg_init
        16   -> SCCB_GPIO_Init
        16   -> SCCB_ReadByte
        16   -> SCCB_WriteByte
        16   -> ov7725_delay
       8   porta_isr
         8   -> NVIC_DisableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       2  ?_0
       2  ?_1
       2  ?_2
      20  LPLD_DMA_Isr
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ
      92  NVIC_Init
     150  OV7725_DMA_Init
     126  OV7725_GPIO_Init
      28  OV7725_Init
      48  UART_Init
    4800  img
     138  img_extract
     600  imgbuff
      56  lpld_sending
      32  ov7725_delay
       1  ov7725_eagle_cfgnum
      62  ov7725_eagle_get_img
       1  ov7725_eagle_img_flag
     100  ov7725_eagle_reg
     124  ov7725_eagle_reg_init
      80  porta_isr

 
 5 400 bytes in section .bss
   102 bytes in section .data
     6 bytes in section .rodata
 1 072 bytes in section .text
 
 1 072 bytes of CODE  memory
     6 bytes of CONST memory
 5 502 bytes of DATA  memory

Errors: none
Warnings: none
