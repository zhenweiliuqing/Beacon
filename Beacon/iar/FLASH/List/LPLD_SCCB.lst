###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        02/Dec/2017  10:48:02
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\app\LPLD_SCCB.c
#    Command line =  
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\app\LPLD_SCCB.c
#        -D LPLD_K60 -D USE_K60F12 -lCN
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\FLASH\List\
#        -lB
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\FLASH\List\
#        -o
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        E:\IAR\File\arm\INC\c\DLib_Config_Normal.h -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\app\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\CPU\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\common\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\LPLD\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\LPLD\HW\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\FatFs\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\FatFs\option\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\USB\common\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\USB\driver\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\USB\descriptor\
#        -I
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\..\..\..\lib\USB\class\
#        -Ol -I E:\IAR\File\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\FLASH\List\LPLD_SCCB.lst
#    Object file  =  
#        E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\iar\FLASH\Obj\LPLD_SCCB.o
#
###############################################################################

E:\K60singlechip\Code\LPLD_OSKinetis_V3\LPLD_Beacon\Beacon\app\LPLD_SCCB.c
      1          #include "common.h"
      2          #include "LPLD_SCCB.h"
      3          
      4          static void SCCB_delay(uint16 i);

   \                                 In section .text, align 2, keep-with-next
      5          static void SCCB_delay(volatile uint16 i)
      6          {
   \                     SCCB_delay: (+1)
   \   00000000   0xB401             PUSH     {R0}
   \   00000002   0xE004             B.N      ??SCCB_delay_0
      7              while(i)
      8              {
      9                  i--;
   \                     ??SCCB_delay_1: (+1)
   \   00000004   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000008   0x1E40             SUBS     R0,R0,#+1
   \   0000000A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     10              }
   \                     ??SCCB_delay_0: (+1)
   \   0000000E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD1F6             BNE.N    ??SCCB_delay_1
     11          }
   \   00000016   0xB001             ADD      SP,SP,#+4
   \   00000018   0x4770             BX       LR               ;; return
     12          
     13          
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void SCCB_GPIO_Init(void)
     16          {
   \                     SCCB_GPIO_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     17             GPIO_InitTypeDef gpio_init_struct;
     18              /*璁剧疆涓篜ULLUP*/
     19             gpio_init_struct.GPIO_PTx = PTA;
   \   00000004   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000006   0x9001             STR      R0,[SP, #+4]
     20             gpio_init_struct.GPIO_Pins = GPIO_Pin25|GPIO_Pin26;
   \   00000008   0xF05F 0x60C0      MOVS     R0,#+100663296
   \   0000000C   0x9002             STR      R0,[SP, #+8]
     21             gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xF88D 0x0010      STRB     R0,[SP, #+16]
     22             gpio_init_struct.GPIO_Output = OUTPUT_H; //锟斤拷始锟斤拷锟斤拷锟轿拷撸锟�
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xF88D 0x0011      STRB     R0,[SP, #+17]
     23             gpio_init_struct.GPIO_PinControl = OUTPUT_OD_EN|INPUT_PULL_UP;
   \   0000001A   0x2023             MOVS     R0,#+35
   \   0000001C   0x9003             STR      R0,[SP, #+12]
     24             
     25             LPLD_GPIO_Init(gpio_init_struct);
   \   0000001E   0xA901             ADD      R1,SP,#+4
   \   00000020   0xB084             SUB      SP,SP,#+16
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x2214             MOVS     R2,#+20
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002A   0xBC0F             POP      {R0-R3}
   \   0000002C   0x.... 0x....      BL       LPLD_GPIO_Init
     26          }
   \   00000030   0xB007             ADD      SP,SP,#+28
   \   00000032   0xBD00             POP      {PC}             ;; return
     27          

   \                                 In section .text, align 2, keep-with-next
     28          static uint8 SCCB_Start(void)
     29          {
   \                     SCCB_Start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     30              SDA_H();
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0064
   \   00000006   0x6008             STR      R0,[R1, #+0]
     31              SCL_H();
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     32              SCCB_DELAY();
   \   0000000E   0xF44F 0x70C8      MOV      R0,#+400
   \   00000012   0x.... 0x....      BL       SCCB_delay
     33          
     34              SDA_DDR_IN();
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe02e4
   \   0000001A   0x6008             STR      R0,[R1, #+0]
     35              if(!SDA_IN())
   \   0000001C   0x....             LDR.N    R0,??DataTable7_4  ;; 0x43fe0264
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD104             BNE.N    ??SCCB_Start_0
     36              {
     37                  SDA_DDR_OUT();
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe02e4
   \   00000028   0x6008             STR      R0,[R1, #+0]
     38                  return 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE016             B.N      ??SCCB_Start_1
     39              }
     40              SDA_DDR_OUT();
   \                     ??SCCB_Start_0: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe02e4
   \   00000032   0x6008             STR      R0,[R1, #+0]
     41              SDA_L();
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0064
   \   00000038   0x6008             STR      R0,[R1, #+0]
     42          
     43              SCCB_DELAY();
   \   0000003A   0xF44F 0x70C8      MOV      R0,#+400
   \   0000003E   0x.... 0x....      BL       SCCB_delay
     44              SCL_L();
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000046   0x6008             STR      R0,[R1, #+0]
     45          
     46              if(SDA_IN())
   \   00000048   0x....             LDR.N    R0,??DataTable7_4  ;; 0x43fe0264
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD004             BEQ.N    ??SCCB_Start_2
     47              {
     48                  SDA_DDR_OUT();
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe02e4
   \   00000054   0x6008             STR      R0,[R1, #+0]
     49                  return 0;   /* SDA绾夸负楂樼數骞冲垯鎬荤嚎鍑洪敊,閫€鍑� */
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0xE000             B.N      ??SCCB_Start_1
     50              }
     51              //SDA_DDR_OUT();
     52              //SDA_L();
     53              //SCCB_delay();
     54              return 1;
   \                     ??SCCB_Start_2: (+1)
   \   0000005A   0x2001             MOVS     R0,#+1
   \                     ??SCCB_Start_1: (+1)
   \   0000005C   0xBD02             POP      {R1,PC}          ;; return
     55          }//OK
     56          

   \                                 In section .text, align 2, keep-with-next
     57          static void SCCB_Stop(void)
     58          {
   \                     SCCB_Stop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     59              SCL_L();
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000006   0x6008             STR      R0,[R1, #+0]
     60              //SCCB_DELAY();
     61              SDA_L();
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0064
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     62              SCCB_DELAY();
   \   0000000E   0xF44F 0x70C8      MOV      R0,#+400
   \   00000012   0x.... 0x....      BL       SCCB_delay
     63              SCL_H();
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   0000001A   0x6008             STR      R0,[R1, #+0]
     64              SCCB_DELAY();
   \   0000001C   0xF44F 0x70C8      MOV      R0,#+400
   \   00000020   0x.... 0x....      BL       SCCB_delay
     65              SDA_H();
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0064
   \   00000028   0x6008             STR      R0,[R1, #+0]
     66              SCCB_DELAY();
   \   0000002A   0xF44F 0x70C8      MOV      R0,#+400
   \   0000002E   0x.... 0x....      BL       SCCB_delay
     67          }
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
     68          

   \                                 In section .text, align 2, keep-with-next
     69          static void SCCB_Ack(void)
     70          {
   \                     SCCB_Ack: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     71              SCL_L();
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000006   0x6008             STR      R0,[R1, #+0]
     72              SCCB_DELAY();
   \   00000008   0xF44F 0x70C8      MOV      R0,#+400
   \   0000000C   0x.... 0x....      BL       SCCB_delay
     73              SDA_L();
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0064
   \   00000014   0x6008             STR      R0,[R1, #+0]
     74              SCCB_DELAY();
   \   00000016   0xF44F 0x70C8      MOV      R0,#+400
   \   0000001A   0x.... 0x....      BL       SCCB_delay
     75              SCL_H();
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000022   0x6008             STR      R0,[R1, #+0]
     76              SCCB_DELAY();
   \   00000024   0xF44F 0x70C8      MOV      R0,#+400
   \   00000028   0x.... 0x....      BL       SCCB_delay
     77              SCL_L();
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000030   0x6008             STR      R0,[R1, #+0]
     78              SCCB_DELAY();
   \   00000032   0xF44F 0x70C8      MOV      R0,#+400
   \   00000036   0x.... 0x....      BL       SCCB_delay
     79          }
   \   0000003A   0xBD01             POP      {R0,PC}          ;; return
     80          

   \                                 In section .text, align 2, keep-with-next
     81          static void SCCB_NoAck(void)
     82          {
   \                     SCCB_NoAck: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     83              SCL_L();
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000006   0x6008             STR      R0,[R1, #+0]
     84              SCCB_DELAY();
   \   00000008   0xF44F 0x70C8      MOV      R0,#+400
   \   0000000C   0x.... 0x....      BL       SCCB_delay
     85              SDA_H();
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0064
   \   00000014   0x6008             STR      R0,[R1, #+0]
     86              SCCB_DELAY();
   \   00000016   0xF44F 0x70C8      MOV      R0,#+400
   \   0000001A   0x.... 0x....      BL       SCCB_delay
     87              SCL_H();
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000022   0x6008             STR      R0,[R1, #+0]
     88              SCCB_DELAY();
   \   00000024   0xF44F 0x70C8      MOV      R0,#+400
   \   00000028   0x.... 0x....      BL       SCCB_delay
     89              SCL_L();
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000030   0x6008             STR      R0,[R1, #+0]
     90              SCCB_DELAY();
   \   00000032   0xF44F 0x70C8      MOV      R0,#+400
   \   00000036   0x.... 0x....      BL       SCCB_delay
     91          }
   \   0000003A   0xBD01             POP      {R0,PC}          ;; return
     92          

   \                                 In section .text, align 2, keep-with-next
     93          static int SCCB_WaitAck(void)
     94          {
   \                     SCCB_WaitAck: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     95              SCL_L();
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000006   0x6008             STR      R0,[R1, #+0]
     96              //SDA_H();
     97              SDA_DDR_IN();
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe02e4
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     98          
     99              SCCB_DELAY();
   \   0000000E   0xF44F 0x70C8      MOV      R0,#+400
   \   00000012   0x.... 0x....      BL       SCCB_delay
    100              SCL_H();
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    101          
    102              SCCB_DELAY();
   \   0000001C   0xF44F 0x70C8      MOV      R0,#+400
   \   00000020   0x.... 0x....      BL       SCCB_delay
    103          
    104              if(SDA_IN())           //搴旂瓟涓洪珮鐢靛钩锛屽紓甯革紝閫氫俊澶辫触
   \   00000024   0x....             LDR.N    R0,??DataTable7_4  ;; 0x43fe0264
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD007             BEQ.N    ??SCCB_WaitAck_0
    105              {
    106                  SDA_DDR_OUT();
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe02e4
   \   00000030   0x6008             STR      R0,[R1, #+0]
    107                  SCL_L();
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000036   0x6008             STR      R0,[R1, #+0]
    108                  return 0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE006             B.N      ??SCCB_WaitAck_1
    109              }//NO
    110              SDA_DDR_OUT();
   \                     ??SCCB_WaitAck_0: (+1)
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe02e4
   \   00000040   0x6008             STR      R0,[R1, #+0]
    111              SCL_L();
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000046   0x6008             STR      R0,[R1, #+0]
    112              return 1;
   \   00000048   0x2001             MOVS     R0,#+1
   \                     ??SCCB_WaitAck_1: (+1)
   \   0000004A   0xBD02             POP      {R1,PC}          ;; return
    113          }
    114          

   \                                 In section .text, align 2, keep-with-next
    115          static void SCCB_SendByte(uint8 SendByte)
    116          {
   \                     SCCB_SendByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
    117              uint8 i = 8;
   \   00000004   0x2408             MOVS     R4,#+8
   \   00000006   0xE011             B.N      ??SCCB_SendByte_0
    118              while(i--)
    119              {
    120          
    121                  if(SendByte & 0x80)     //SDA 杈撳嚭鏁版嵁
    122                  {
    123                      SDA_H();
    124                  }
    125                  else
    126                  {
    127                      SDA_L();
   \                     ??SCCB_SendByte_1: (+1)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0064
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    128                  }
    129                  SendByte <<= 1;
   \                     ??SCCB_SendByte_2: (+1)
   \   0000000E   0x006D             LSLS     R5,R5,#+1
    130                  SCCB_DELAY();
   \   00000010   0xF44F 0x70C8      MOV      R0,#+400
   \   00000014   0x.... 0x....      BL       SCCB_delay
    131                  SCL_H();                //SCL 鎷夐珮锛岄噰闆嗕俊鍙�
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    132                  SCCB_DELAY();
   \   0000001E   0xF44F 0x70C8      MOV      R0,#+400
   \   00000022   0x.... 0x....      BL       SCCB_delay
    133                  SCL_L();                //SCL 鏃堕挓绾挎媺浣�
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   \                     ??SCCB_SendByte_0: (+1)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x1E44             SUBS     R4,R0,#+1
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD005             BEQ.N    ??SCCB_SendByte_3
   \   00000036   0x0628             LSLS     R0,R5,#+24
   \   00000038   0xD5E6             BPL.N    ??SCCB_SendByte_1
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x....             LDR.N    R1,??DataTable7_1  ;; 0x43fe0064
   \   0000003E   0x6008             STR      R0,[R1, #+0]
   \   00000040   0xE7E5             B.N      ??SCCB_SendByte_2
    134                  //SCCB_DELAY();
    135              }
    136              //SCL_L();
    137          }
   \                     ??SCCB_SendByte_3: (+1)
   \   00000042   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    138          

   \                                 In section .text, align 2, keep-with-next
    139          static int SCCB_ReceiveByte(void)
    140          {
   \                     SCCB_ReceiveByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    141              uint8 i = 8;
   \   00000002   0x2408             MOVS     R4,#+8
    142              uint8 ReceiveByte = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    143          
    144              //SDA_H();
    145              //SCCB_DELAY();
    146              SDA_DDR_IN();
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe02e4
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \   0000000C   0xE014             B.N      ??SCCB_ReceiveByte_0
    147          
    148              while(i--)
    149              {
    150                  ReceiveByte <<= 1;
   \                     ??SCCB_ReceiveByte_1: (+1)
   \   0000000E   0x006D             LSLS     R5,R5,#+1
    151                  SCL_L();
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000014   0x6008             STR      R0,[R1, #+0]
    152                  SCCB_DELAY();
   \   00000016   0xF44F 0x70C8      MOV      R0,#+400
   \   0000001A   0x.... 0x....      BL       SCCB_delay
    153                  SCL_H();
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   00000022   0x6008             STR      R0,[R1, #+0]
    154                  SCCB_DELAY();
   \   00000024   0xF44F 0x70C8      MOV      R0,#+400
   \   00000028   0x.... 0x....      BL       SCCB_delay
    155          
    156                  if(SDA_IN())
   \   0000002C   0x....             LDR.N    R0,??DataTable7_4  ;; 0x43fe0264
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD001             BEQ.N    ??SCCB_ReceiveByte_0
    157                  {
    158                      ReceiveByte |= 0x01;
   \   00000034   0xF055 0x0501      ORRS     R5,R5,#0x1
    159                  }
    160          
    161          
    162              }
   \                     ??SCCB_ReceiveByte_0: (+1)
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x1E44             SUBS     R4,R0,#+1
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1E5             BNE.N    ??SCCB_ReceiveByte_1
    163              SDA_DDR_OUT();
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x....             LDR.N    R1,??DataTable7_3  ;; 0x43fe02e4
   \   00000046   0x6008             STR      R0,[R1, #+0]
    164              SCL_L();
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x....             LDR.N    R1,??DataTable7_2  ;; 0x43fe0068
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    165              return ReceiveByte;
   \   0000004E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000050   0x0028             MOVS     R0,R5
   \   00000052   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    166          }
    167          
    168          static int SCCB_WriteByte_one( uint16 WriteAddress , uint8 SendByte );
    169          
    170          

   \                                 In section .text, align 2, keep-with-next
    171          int SCCB_WriteByte( uint16 WriteAddress , uint8 SendByte )            //鑰冭檻鍒扮敤sccb鐨勭鑴氭ā鎷燂紝姣旇緝瀹规槗澶辫触锛屽洜姝ゅ璇曞嚑娆�
    172          {
   \                     SCCB_WriteByte: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    173              uint8 i = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    174              while( 0 == SCCB_WriteByte_one ( WriteAddress, SendByte ) )
   \                     ??SCCB_WriteByte_0: (+1)
   \   00000008   0x0029             MOVS     R1,R5
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x.... 0x....      BL       SCCB_WriteByte_one
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD105             BNE.N    ??SCCB_WriteByte_1
    175              {
    176                  i++;
   \   00000018   0x1C76             ADDS     R6,R6,#+1
    177                  if(i == 20)
   \   0000001A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001C   0x2E14             CMP      R6,#+20
   \   0000001E   0xD1F3             BNE.N    ??SCCB_WriteByte_0
    178                  {
    179                      return 0 ;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE000             B.N      ??SCCB_WriteByte_2
    180                  }
    181              }
    182              return 1;
   \                     ??SCCB_WriteByte_1: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \                     ??SCCB_WriteByte_2: (+1)
   \   00000026   0xBD70             POP      {R4-R6,PC}       ;; return
    183          }
    184          

   \                                 In section .text, align 2, keep-with-next
    185          int SCCB_WriteByte_one( uint16 WriteAddress , uint8 SendByte )
    186          {
   \                     SCCB_WriteByte_one: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    187              if(!SCCB_Start())
   \   00000006   0x.... 0x....      BL       SCCB_Start
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??SCCB_WriteByte_one_0
    188              {
    189                  return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE019             B.N      ??SCCB_WriteByte_one_1
    190              }
    191              SCCB_SendByte( DEV_ADR );                    /* 鍣ㄤ欢鍦板潃 */
   \                     ??SCCB_WriteByte_one_0: (+1)
   \   00000012   0x2042             MOVS     R0,#+66
   \   00000014   0x.... 0x....      BL       SCCB_SendByte
    192              if( !SCCB_WaitAck() )
   \   00000018   0x.... 0x....      BL       SCCB_WaitAck
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD103             BNE.N    ??SCCB_WriteByte_one_2
    193              {
    194                  SCCB_Stop();
   \   00000020   0x.... 0x....      BL       SCCB_Stop
    195                  return 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE00E             B.N      ??SCCB_WriteByte_one_1
    196              }
    197              SCCB_SendByte((uint8)(WriteAddress & 0x00FF));   /* 璁剧疆浣庤捣濮嬪湴鍧€ */
   \                     ??SCCB_WriteByte_one_2: (+1)
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       SCCB_SendByte
    198              SCCB_WaitAck();
   \   00000030   0x.... 0x....      BL       SCCB_WaitAck
    199              SCCB_SendByte(SendByte);
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       SCCB_SendByte
    200              SCCB_WaitAck();
   \   0000003C   0x.... 0x....      BL       SCCB_WaitAck
    201              SCCB_Stop();
   \   00000040   0x.... 0x....      BL       SCCB_Stop
    202              return 1;
   \   00000044   0x2001             MOVS     R0,#+1
   \                     ??SCCB_WriteByte_one_1: (+1)
   \   00000046   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    203          }
    204          
    205          static int SCCB_ReadByte_one(uint8 *pBuffer,   uint16 length,   uint8 ReadAddress);
    206          

   \                                 In section .text, align 2, keep-with-next
    207          int SCCB_ReadByte(uint8 *pBuffer,   uint16 length,   uint8 ReadAddress)
    208          {
   \                     SCCB_ReadByte: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    209              uint8 i = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    210              while( 0 == SCCB_ReadByte_one(pBuffer, length, ReadAddress) )
   \                     ??SCCB_ReadByte_0: (+1)
   \   0000000A   0x0032             MOVS     R2,R6
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       SCCB_ReadByte_one
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD105             BNE.N    ??SCCB_ReadByte_1
    211              {
    212                  i++;
   \   0000001C   0x1C7F             ADDS     R7,R7,#+1
    213                  if(i == 30)
   \   0000001E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000020   0x2F1E             CMP      R7,#+30
   \   00000022   0xD1F2             BNE.N    ??SCCB_ReadByte_0
    214                  {
    215                      return 0 ;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE000             B.N      ??SCCB_ReadByte_2
    216                  }
    217              }
    218              return 1;
   \                     ??SCCB_ReadByte_1: (+1)
   \   00000028   0x2001             MOVS     R0,#+1
   \                     ??SCCB_ReadByte_2: (+1)
   \   0000002A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    219          }
    220          

   \                                 In section .text, align 2, keep-with-next
    221          int SCCB_ReadByte_one(uint8 *pBuffer,   uint16 length,   uint8 ReadAddress)
    222          {
   \                     SCCB_ReadByte_one: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    223              if(!SCCB_Start())
   \   00000008   0x.... 0x....      BL       SCCB_Start
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??SCCB_ReadByte_one_0
    224              {
    225                  return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE036             B.N      ??SCCB_ReadByte_one_1
    226              }
    227              SCCB_SendByte( DEV_ADR );         /* 鍣ㄤ欢鍦板潃 */
   \                     ??SCCB_ReadByte_one_0: (+1)
   \   00000014   0x2042             MOVS     R0,#+66
   \   00000016   0x.... 0x....      BL       SCCB_SendByte
    228              if( !SCCB_WaitAck() )
   \   0000001A   0x.... 0x....      BL       SCCB_WaitAck
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD103             BNE.N    ??SCCB_ReadByte_one_2
    229              {
    230                  SCCB_Stop();
   \   00000022   0x.... 0x....      BL       SCCB_Stop
    231                  return 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xE02B             B.N      ??SCCB_ReadByte_one_1
    232              }
    233              SCCB_SendByte( ReadAddress );           /* 璁剧疆浣庤捣濮嬪湴鍧€ */
   \                     ??SCCB_ReadByte_one_2: (+1)
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x.... 0x....      BL       SCCB_SendByte
    234              SCCB_WaitAck();
   \   00000032   0x.... 0x....      BL       SCCB_WaitAck
    235              SCCB_Stop();
   \   00000036   0x.... 0x....      BL       SCCB_Stop
    236          
    237              if(!SCCB_Start())
   \   0000003A   0x.... 0x....      BL       SCCB_Start
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD101             BNE.N    ??SCCB_ReadByte_one_3
    238              {
    239                  return 0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE01D             B.N      ??SCCB_ReadByte_one_1
    240              }
    241              SCCB_SendByte( DEV_ADR + 1 );               /* 鍣ㄤ欢鍦板潃 */
   \                     ??SCCB_ReadByte_one_3: (+1)
   \   00000046   0x2043             MOVS     R0,#+67
   \   00000048   0x.... 0x....      BL       SCCB_SendByte
    242          
    243              if(!SCCB_WaitAck())
   \   0000004C   0x.... 0x....      BL       SCCB_WaitAck
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD107             BNE.N    ??SCCB_ReadByte_one_4
    244              {
    245                  SCCB_Stop();
   \   00000054   0x.... 0x....      BL       SCCB_Stop
    246                  return 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xE012             B.N      ??SCCB_ReadByte_one_1
    247              }
    248              while(length)
    249              {
    250                  *pBuffer = SCCB_ReceiveByte();
    251                  if(length == 1)
    252                  {
    253                      SCCB_NoAck();
    254                  }
    255                  else
    256                  {
    257                      SCCB_Ack();
   \                     ??SCCB_ReadByte_one_5: (+1)
   \   0000005C   0x.... 0x....      BL       SCCB_Ack
    258                  }
    259                  pBuffer++;
   \                     ??SCCB_ReadByte_one_6: (+1)
   \   00000060   0x1C64             ADDS     R4,R4,#+1
    260                  length--;
   \   00000062   0x1E6D             SUBS     R5,R5,#+1
   \                     ??SCCB_ReadByte_one_4: (+1)
   \   00000064   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000066   0x2D00             CMP      R5,#+0
   \   00000068   0xD008             BEQ.N    ??SCCB_ReadByte_one_7
   \   0000006A   0x.... 0x....      BL       SCCB_ReceiveByte
   \   0000006E   0x7020             STRB     R0,[R4, #+0]
   \   00000070   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000072   0x2D01             CMP      R5,#+1
   \   00000074   0xD1F2             BNE.N    ??SCCB_ReadByte_one_5
   \   00000076   0x.... 0x....      BL       SCCB_NoAck
   \   0000007A   0xE7F1             B.N      ??SCCB_ReadByte_one_6
    261              }
    262              SCCB_Stop();
   \                     ??SCCB_ReadByte_one_7: (+1)
   \   0000007C   0x.... 0x....      BL       SCCB_Stop
    263              return 1;
   \   00000080   0x2001             MOVS     R0,#+1
   \                     ??SCCB_ReadByte_one_1: (+1)
   \   00000082   0xBD70             POP      {R4-R6,PC}       ;; return
    264          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x43FE0064         DC32     0x43fe0064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x43FE0068         DC32     0x43fe0068

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x43FE02E4         DC32     0x43fe02e4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x43FE0264         DC32     0x43fe0264

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SCCB_Ack
         8   -> SCCB_delay
      48   SCCB_GPIO_Init
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
       8   SCCB_NoAck
         8   -> SCCB_delay
      24   SCCB_ReadByte
        24   -> SCCB_ReadByte_one
      16   SCCB_ReadByte_one
        16   -> SCCB_Ack
        16   -> SCCB_NoAck
        16   -> SCCB_ReceiveByte
        16   -> SCCB_SendByte
        16   -> SCCB_Start
        16   -> SCCB_Stop
        16   -> SCCB_WaitAck
      16   SCCB_ReceiveByte
        16   -> SCCB_delay
      16   SCCB_SendByte
        16   -> SCCB_delay
       8   SCCB_Start
         8   -> SCCB_delay
       8   SCCB_Stop
         8   -> SCCB_delay
       8   SCCB_WaitAck
         8   -> SCCB_delay
      16   SCCB_WriteByte
        16   -> SCCB_WriteByte_one
      16   SCCB_WriteByte_one
        16   -> SCCB_SendByte
        16   -> SCCB_Start
        16   -> SCCB_Stop
        16   -> SCCB_WaitAck
       4   SCCB_delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
      60  SCCB_Ack
      52  SCCB_GPIO_Init
      60  SCCB_NoAck
      44  SCCB_ReadByte
     132  SCCB_ReadByte_one
      84  SCCB_ReceiveByte
      68  SCCB_SendByte
      94  SCCB_Start
      52  SCCB_Stop
      76  SCCB_WaitAck
      40  SCCB_WriteByte
      72  SCCB_WriteByte_one
      26  SCCB_delay

 
 880 bytes in section .text
 
 880 bytes of CODE memory

Errors: none
Warnings: none
